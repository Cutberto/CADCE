"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var fetch_1 = require("./fetch");
var buildOpts_1 = require("./buildOpts");
var checkError_1 = require("./checkError");
var checkArg_1 = require("./checkArg");
var rateLimitHandler_1 = require("./rateLimitHandler");
var baseURL = 'https://api.airtable.com/v0';
var validOptions = [
    'fields',
    'filterByFormula',
    'maxRecords',
    'pageSize',
    'sort',
    'view',
    'where',
];
/**
 * The main AsyncAirtable class.
 */
var AsyncAirtable = /** @class */ (function () {
    /**
     * Creates a new instance of the AsyncAirtable library.
     * @param apiKey The API Key from AirTable
     * @param base The base id from AirTable
     * @param config The config to use for this instance of AsyncAirtable
     */
    function AsyncAirtable(apiKey, base, config) {
        var _this = this;
        /**
         * Select record(s) from the specified table.
         * @param table Table name
         * @param options Options object, used to filter records
         * @param page Used to get a specific page of records
         * @returns
         * @async
         */
        this.select = function (table, options, page) { return __awaiter(_this, void 0, void 0, function () {
            var url, opts, offset, data, i, res, body, err_1, done, res, body, err_2, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 20, , 21]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(options, 'options', 'object', false);
                        checkArg_1.default(page, 'page', 'number', false);
                        url = baseURL + "/" + this.base + "/" + table;
                        opts = options ? __assign({}, options) : {};
                        Object.keys(opts).forEach(function (option) {
                            if (!validOptions.includes(option)) {
                                throw new Error("Invalid option: " + option);
                            }
                        });
                        offset = '';
                        data = [];
                        if (!page) return [3 /*break*/, 10];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < page)) return [3 /*break*/, 9];
                        if (offset) {
                            opts.offset = offset;
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 7, , 8]);
                        return [4 /*yield*/, fetch_1.default(url + "?" + buildOpts_1.default(opts), {
                                headers: { Authorization: "Bearer " + this.apiKey },
                            })];
                    case 3:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 4:
                        body = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 6];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(body));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 6];
                        if (!(i + 1 === page)) return [3 /*break*/, 6];
                        return [4 /*yield*/, rateLimitHandler_1.default(url + "?" + buildOpts_1.default(opts), {
                                headers: { Authorization: "Bearer " + this.apiKey },
                            }, this.retryTimeout, this.maxRetry, 'records')];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6:
                        if (i + 1 === page) {
                            return [2 /*return*/, body.records];
                        }
                        offset = body.offset;
                        return [3 /*break*/, 8];
                    case 7:
                        err_1 = _a.sent();
                        throw new Error(err_1);
                    case 8:
                        i++;
                        return [3 /*break*/, 1];
                    case 9: return [3 /*break*/, 19];
                    case 10:
                        done = false;
                        _a.label = 11;
                    case 11:
                        if (!!done) return [3 /*break*/, 19];
                        if (offset) {
                            opts.offset = offset;
                        }
                        _a.label = 12;
                    case 12:
                        _a.trys.push([12, 17, , 18]);
                        return [4 /*yield*/, fetch_1.default(url + "?" + buildOpts_1.default(opts), {
                                headers: { Authorization: "Bearer " + this.apiKey },
                            })];
                    case 13:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 14:
                        body = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 16];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(body));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 16];
                        return [4 /*yield*/, rateLimitHandler_1.default(url + "?" + buildOpts_1.default(opts), {
                                headers: { Authorization: "Bearer " + this.apiKey },
                            }, this.retryTimeout, this.maxRetry, 'records')];
                    case 15: return [2 /*return*/, _a.sent()];
                    case 16:
                        data = data.concat(body.records);
                        offset = body.offset;
                        if (!body.offset) {
                            done = true;
                        }
                        return [3 /*break*/, 18];
                    case 17:
                        err_2 = _a.sent();
                        throw new Error(err_2);
                    case 18: return [3 /*break*/, 11];
                    case 19: return [2 /*return*/, data];
                    case 20:
                        err_3 = _a.sent();
                        throw new Error(err_3);
                    case 21: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Finds a record on the specified table.
         * @param table Table name
         * @param id Airtable record ID
         * @returns
         * @async
         */
        this.find = function (table, id) { return __awaiter(_this, void 0, void 0, function () {
            var url, res, data, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(id, 'id', 'string');
                        url = baseURL + "/" + this.base + "/" + table + "/" + id;
                        return [4 /*yield*/, fetch_1.default(url, {
                                headers: { Authorization: "Bearer " + this.apiKey },
                            })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 4];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(data));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 4];
                        return [4 /*yield*/, rateLimitHandler_1.default(url, {
                                headers: { Authorization: "Bearer " + this.apiKey },
                            }, this.retryTimeout, this.maxRetry)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/, data];
                    case 5:
                        err_4 = _a.sent();
                        throw new Error(err_4);
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Creates a new record on the specified table.
         * @param table - Table name
         * @param record - Record object, used to structure data for insert
         * @param typecast - Used for allowing the ability to add new selections for Select and Multiselect fields.
         * @returns
         * @async
         */
        this.createRecord = function (table, record, typecast) { return __awaiter(_this, void 0, void 0, function () {
            var url, body, res, data, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(record, 'record', 'object');
                        checkArg_1.default(typecast, 'typecast', 'boolean', false);
                        url = baseURL + "/" + this.base + "/" + table;
                        body = { fields: record };
                        if (typecast !== undefined) {
                            body.typecast = typecast;
                        }
                        return [4 /*yield*/, fetch_1.default(url, {
                                method: 'post',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 4];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(data));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 4];
                        return [4 /*yield*/, rateLimitHandler_1.default(url, {
                                method: 'post',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            }, this.retryTimeout, this.maxRetry)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/, data];
                    case 5:
                        err_5 = _a.sent();
                        throw new Error(err_5);
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Updates a record on the specified table.
         * @param table - Table name
         * @param record - Record object, used to update data within a specific record
         * @param opts - An object with options for your update statement
         * @returns
         * @async
         */
        this.updateRecord = function (table, record, opts) { return __awaiter(_this, void 0, void 0, function () {
            var url, body, res, data, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(record, 'record', 'object');
                        if (opts) {
                            checkArg_1.default(opts.destructive, 'opts.desctructive', 'boolean');
                            checkArg_1.default(opts.typecast, 'opts.typecast', 'boolean', false);
                        }
                        url = baseURL + "/" + this.base + "/" + table + "/" + record.id;
                        body = { fields: record.fields };
                        if ((opts === null || opts === void 0 ? void 0 : opts.typecast) !== undefined) {
                            body.typecast = opts === null || opts === void 0 ? void 0 : opts.typecast;
                        }
                        return [4 /*yield*/, fetch_1.default(url, {
                                method: (opts === null || opts === void 0 ? void 0 : opts.destructive) ? 'put' : 'patch',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 4];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(data));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 4];
                        return [4 /*yield*/, rateLimitHandler_1.default(url, {
                                method: (opts === null || opts === void 0 ? void 0 : opts.destructive) ? 'put' : 'patch',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            }, this.retryTimeout, this.maxRetry)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/, data];
                    case 5:
                        err_6 = _a.sent();
                        throw new Error(err_6);
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Deletes a record from the specified table.
         * @param table - Table name
         * @param id - Airtable record ID
         * @returns
         * @async
         */
        this.deleteRecord = function (table, id) { return __awaiter(_this, void 0, void 0, function () {
            var url, res, data, err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(id, 'id', 'string');
                        url = baseURL + "/" + this.base + "/" + table + "/" + id;
                        return [4 /*yield*/, fetch_1.default(url, {
                                method: 'delete',
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                },
                            })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 4];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(data));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 4];
                        return [4 /*yield*/, rateLimitHandler_1.default(url, {
                                method: 'delete',
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                },
                            }, this.retryTimeout, this.maxRetry)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/, data];
                    case 5:
                        err_7 = _a.sent();
                        throw new Error(err_7);
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Creates multiple new records on the specified table.
         * @param table - Table name
         * @param records - An array of Record objects
         * @param typecast - Used for allowing the ability to add new selections for Select and Multiselect fields.
         * @returns
         * @async
         */
        this.bulkCreate = function (table, records, typecast) { return __awaiter(_this, void 0, void 0, function () {
            var url, body, res, data, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(records, 'records', 'array');
                        checkArg_1.default(typecast, 'typecast', 'boolean', false);
                        url = baseURL + "/" + this.base + "/" + table;
                        body = {
                            records: records.map(function (record) { return ({
                                fields: record,
                            }); }),
                        };
                        if (typecast !== undefined) {
                            body.typecast = typecast;
                        }
                        return [4 /*yield*/, fetch_1.default(url, {
                                method: 'post',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 4];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(data));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 4];
                        return [4 /*yield*/, rateLimitHandler_1.default(url, {
                                method: 'post',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            }, this.retryTimeout, this.maxRetry, 'records')];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/, data.records];
                    case 5:
                        err_8 = _a.sent();
                        throw new Error(err_8);
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Updates multiple records on the specified table
         * @param table - Table name
         * @param records - An array of Record objects
         * @param opts - An object with options for your update statement
         * @returns
         * @async
         */
        this.bulkUpdate = function (table, records, opts) { return __awaiter(_this, void 0, void 0, function () {
            var url, body, res, data, err_9;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(records, 'records', 'array');
                        if (opts) {
                            checkArg_1.default(opts.destructive, 'opts.desctructive', 'boolean', false);
                            checkArg_1.default(opts.typecast, 'opts.typecast', 'boolean', false);
                        }
                        url = baseURL + "/" + this.base + "/" + table;
                        body = { records: records };
                        if ((opts === null || opts === void 0 ? void 0 : opts.typecast) !== undefined) {
                            body.typecast = opts === null || opts === void 0 ? void 0 : opts.typecast;
                        }
                        return [4 /*yield*/, fetch_1.default(url, {
                                method: (opts === null || opts === void 0 ? void 0 : opts.destructive) ? 'put' : 'patch',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 4];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(data));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 4];
                        return [4 /*yield*/, rateLimitHandler_1.default(url, {
                                method: (opts === null || opts === void 0 ? void 0 : opts.destructive) ? 'put' : 'patch',
                                body: JSON.stringify(body),
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                    'Content-Type': 'application/json',
                                },
                            }, this.retryTimeout, this.maxRetry, 'records')];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/, data.records];
                    case 5:
                        err_9 = _a.sent();
                        throw new Error(err_9);
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Deletes multiple records from the specified table
         * @param table - Table name
         * @param ids - Array of Airtable record IDs
         * @returns
         * @async
         */
        this.bulkDelete = function (table, ids) { return __awaiter(_this, void 0, void 0, function () {
            var query_1, url, res, data, err_10;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(ids, 'ids', 'array');
                        query_1 = '';
                        ids.forEach(function (id, i) {
                            if (i !== 0) {
                                query_1 = query_1 + "&records[]=" + id;
                            }
                            else {
                                query_1 = "records[]=" + id;
                            }
                        });
                        url = baseURL + "/" + this.base + "/" + table + "?" + encodeURI(query_1);
                        return [4 /*yield*/, fetch_1.default(url, {
                                method: 'delete',
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                },
                            })];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        if (!checkError_1.default(res.status)) return [3 /*break*/, 4];
                        if (res.status !== 429) {
                            throw new Error(JSON.stringify(data));
                        }
                        if (!this.retryOnRateLimit) return [3 /*break*/, 4];
                        return [4 /*yield*/, rateLimitHandler_1.default(url, {
                                method: 'delete',
                                headers: {
                                    Authorization: "Bearer " + this.apiKey,
                                },
                            }, this.retryTimeout, this.maxRetry, 'records')];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/, data.records];
                    case 5:
                        err_10 = _a.sent();
                        throw new Error(err_10);
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Checks if a record exists, and if it does updates it, if not creates a new record.
         * @param table - Table name
         * @param filterString - The filter formula string used to check for a record
         * @param record - Record object used to either update or create a record
         * @param opts - An object with options for your update statement
         * @returns
         * @async
         */
        this.upsertRecord = function (table, filterString, record, opts) { return __awaiter(_this, void 0, void 0, function () {
            var exists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        checkArg_1.default(table, 'table', 'string');
                        checkArg_1.default(filterString, 'filterString', 'string');
                        checkArg_1.default(record, 'record', 'object');
                        if (opts) {
                            checkArg_1.default(opts.destructive, 'opts.desctructive', 'boolean', false);
                            checkArg_1.default(opts.typecast, 'opts.typecast', 'boolean', false);
                        }
                        return [4 /*yield*/, this.select(table, { filterByFormula: filterString })];
                    case 1:
                        exists = _a.sent();
                        if (!!exists[0]) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.createRecord(table, record, opts === null || opts === void 0 ? void 0 : opts.typecast)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [4 /*yield*/, this.updateRecord(table, {
                            id: exists[0].id,
                            fields: record,
                        }, opts)];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        if (!apiKey)
            throw new Error('API Key is required.');
        if (!base)
            throw new Error('Base ID is required.');
        this.apiKey = apiKey;
        this.base = base;
        this.retryOnRateLimit = (config === null || config === void 0 ? void 0 : config.retryOnRateLimit) || true;
        this.retryTimeout = (config === null || config === void 0 ? void 0 : config.retryTimeout) || 5000;
        this.maxRetry = (config === null || config === void 0 ? void 0 : config.maxRetry) || 60000;
    }
    return AsyncAirtable;
}());
if (typeof window !== 'undefined') {
    window.AsyncAirtable = AsyncAirtable;
}
module.exports = AsyncAirtable;
//# sourceMappingURL=asyncAirtable.js.map