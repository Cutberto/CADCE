(()=>{"use strict";var e={300:(e,t)=>{var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==r)return r;throw new Error("unable to locate global object")}();e.exports=t=r.fetch,r.fetch&&(t.default=r.fetch.bind(r)),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response},759:function(e,t,r){var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{u(n.next(e))}catch(e){s(e)}}function o(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}u((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,i,s,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}},a=r(276),o=r(368),u=r(320),c=r(917),l=r(682),f="https://api.airtable.com/v0",d=["fields","filterByFormula","maxRecords","pageSize","sort","view","where"],h=function(e,t,r){var h=this;if(this.select=function(e,t,r){return i(h,void 0,void 0,(function(){var i,h,p,y,b,v,w,m,g,O,j;return s(this,(function(s){switch(s.label){case 0:if(s.trys.push([0,20,,21]),c.default(e,"table","string"),c.default(t,"options","object",!1),c.default(r,"page","number",!1),i=f+"/"+this.base+"/"+e,h=t?n({},t):{},Object.keys(h).forEach((function(e){if(!d.includes(e))throw new Error("Invalid option: "+e)})),p="",y=[],!r)return[3,10];b=0,s.label=1;case 1:if(!(b<r))return[3,9];p&&(h.offset=p),s.label=2;case 2:return s.trys.push([2,7,,8]),[4,a.default(i+"?"+o.default(h),{headers:{Authorization:"Bearer "+this.apiKey}})];case 3:return[4,(m=s.sent()).json()];case 4:if(g=s.sent(),!u.default(m.status))return[3,6];if(429!==m.status)throw new Error(JSON.stringify(g));return this.retryOnRateLimit?b+1!==r?[3,6]:[4,l.default(i+"?"+o.default(h),{headers:{Authorization:"Bearer "+this.apiKey}},this.retryTimeout,this.maxRetry,"records")]:[3,6];case 5:return[2,s.sent()];case 6:return b+1===r?[2,g.records]:(p=g.offset,[3,8]);case 7:throw v=s.sent(),new Error(v);case 8:return b++,[3,1];case 9:return[3,19];case 10:w=!1,s.label=11;case 11:if(w)return[3,19];p&&(h.offset=p),s.label=12;case 12:return s.trys.push([12,17,,18]),[4,a.default(i+"?"+o.default(h),{headers:{Authorization:"Bearer "+this.apiKey}})];case 13:return[4,(m=s.sent()).json()];case 14:if(g=s.sent(),!u.default(m.status))return[3,16];if(429!==m.status)throw new Error(JSON.stringify(g));return this.retryOnRateLimit?[4,l.default(i+"?"+o.default(h),{headers:{Authorization:"Bearer "+this.apiKey}},this.retryTimeout,this.maxRetry,"records")]:[3,16];case 15:return[2,s.sent()];case 16:return y=y.concat(g.records),p=g.offset,g.offset||(w=!0),[3,18];case 17:throw O=s.sent(),new Error(O);case 18:return[3,11];case 19:return[2,y];case 20:throw j=s.sent(),new Error(j);case 21:return[2]}}))}))},this.find=function(e,t){return i(h,void 0,void 0,(function(){var r,n,i,o;return s(this,(function(s){switch(s.label){case 0:return s.trys.push([0,5,,6]),c.default(e,"table","string"),c.default(t,"id","string"),r=f+"/"+this.base+"/"+e+"/"+t,[4,a.default(r,{headers:{Authorization:"Bearer "+this.apiKey}})];case 1:return[4,(n=s.sent()).json()];case 2:if(i=s.sent(),!u.default(n.status))return[3,4];if(429!==n.status)throw new Error(JSON.stringify(i));return this.retryOnRateLimit?[4,l.default(r,{headers:{Authorization:"Bearer "+this.apiKey}},this.retryTimeout,this.maxRetry)]:[3,4];case 3:return[2,s.sent()];case 4:return[2,i];case 5:throw o=s.sent(),new Error(o);case 6:return[2]}}))}))},this.createRecord=function(e,t,r){return i(h,void 0,void 0,(function(){var n,i,o,d,h;return s(this,(function(s){switch(s.label){case 0:return s.trys.push([0,5,,6]),c.default(e,"table","string"),c.default(t,"record","object"),c.default(r,"typecast","boolean",!1),n=f+"/"+this.base+"/"+e,i={fields:t},void 0!==r&&(i.typecast=r),[4,a.default(n,{method:"post",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}})];case 1:return[4,(o=s.sent()).json()];case 2:if(d=s.sent(),!u.default(o.status))return[3,4];if(429!==o.status)throw new Error(JSON.stringify(d));return this.retryOnRateLimit?[4,l.default(n,{method:"post",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry)]:[3,4];case 3:return[2,s.sent()];case 4:return[2,d];case 5:throw h=s.sent(),new Error(h);case 6:return[2]}}))}))},this.updateRecord=function(e,t,r){return i(h,void 0,void 0,(function(){var n,i,o,d,h;return s(this,(function(s){switch(s.label){case 0:return s.trys.push([0,5,,6]),c.default(e,"table","string"),c.default(t,"record","object"),r&&(c.default(r.destructive,"opts.desctructive","boolean"),c.default(r.typecast,"opts.typecast","boolean",!1)),n=f+"/"+this.base+"/"+e+"/"+t.id,i={fields:t.fields},void 0!==(null==r?void 0:r.typecast)&&(i.typecast=null==r?void 0:r.typecast),[4,a.default(n,{method:(null==r?void 0:r.destructive)?"put":"patch",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}})];case 1:return[4,(o=s.sent()).json()];case 2:if(d=s.sent(),!u.default(o.status))return[3,4];if(429!==o.status)throw new Error(JSON.stringify(d));return this.retryOnRateLimit?[4,l.default(n,{method:(null==r?void 0:r.destructive)?"put":"patch",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry)]:[3,4];case 3:return[2,s.sent()];case 4:return[2,d];case 5:throw h=s.sent(),new Error(h);case 6:return[2]}}))}))},this.deleteRecord=function(e,t){return i(h,void 0,void 0,(function(){var r,n,i,o;return s(this,(function(s){switch(s.label){case 0:return s.trys.push([0,5,,6]),c.default(e,"table","string"),c.default(t,"id","string"),r=f+"/"+this.base+"/"+e+"/"+t,[4,a.default(r,{method:"delete",headers:{Authorization:"Bearer "+this.apiKey}})];case 1:return[4,(n=s.sent()).json()];case 2:if(i=s.sent(),!u.default(n.status))return[3,4];if(429!==n.status)throw new Error(JSON.stringify(i));return this.retryOnRateLimit?[4,l.default(r,{method:"delete",headers:{Authorization:"Bearer "+this.apiKey}},this.retryTimeout,this.maxRetry)]:[3,4];case 3:return[2,s.sent()];case 4:return[2,i];case 5:throw o=s.sent(),new Error(o);case 6:return[2]}}))}))},this.bulkCreate=function(e,t,r){return i(h,void 0,void 0,(function(){var n,i,o,d,h;return s(this,(function(s){switch(s.label){case 0:return s.trys.push([0,5,,6]),c.default(e,"table","string"),c.default(t,"records","array"),c.default(r,"typecast","boolean",!1),n=f+"/"+this.base+"/"+e,i={records:t.map((function(e){return{fields:e}}))},void 0!==r&&(i.typecast=r),[4,a.default(n,{method:"post",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}})];case 1:return[4,(o=s.sent()).json()];case 2:if(d=s.sent(),!u.default(o.status))return[3,4];if(429!==o.status)throw new Error(JSON.stringify(d));return this.retryOnRateLimit?[4,l.default(n,{method:"post",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry,"records")]:[3,4];case 3:return[2,s.sent()];case 4:return[2,d.records];case 5:throw h=s.sent(),new Error(h);case 6:return[2]}}))}))},this.bulkUpdate=function(e,t,r){return i(h,void 0,void 0,(function(){var n,i,o,d,h;return s(this,(function(s){switch(s.label){case 0:return s.trys.push([0,5,,6]),c.default(e,"table","string"),c.default(t,"records","array"),r&&(c.default(r.destructive,"opts.desctructive","boolean",!1),c.default(r.typecast,"opts.typecast","boolean",!1)),n=f+"/"+this.base+"/"+e,i={records:t},void 0!==(null==r?void 0:r.typecast)&&(i.typecast=null==r?void 0:r.typecast),[4,a.default(n,{method:(null==r?void 0:r.destructive)?"put":"patch",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}})];case 1:return[4,(o=s.sent()).json()];case 2:if(d=s.sent(),!u.default(o.status))return[3,4];if(429!==o.status)throw new Error(JSON.stringify(d));return this.retryOnRateLimit?[4,l.default(n,{method:(null==r?void 0:r.destructive)?"put":"patch",body:JSON.stringify(i),headers:{Authorization:"Bearer "+this.apiKey,"Content-Type":"application/json"}},this.retryTimeout,this.maxRetry,"records")]:[3,4];case 3:return[2,s.sent()];case 4:return[2,d.records];case 5:throw h=s.sent(),new Error(h);case 6:return[2]}}))}))},this.bulkDelete=function(e,t){return i(h,void 0,void 0,(function(){var r,n,i,o,d;return s(this,(function(s){switch(s.label){case 0:return s.trys.push([0,5,,6]),c.default(e,"table","string"),c.default(t,"ids","array"),r="",t.forEach((function(e,t){r=0!==t?r+"&records[]="+e:"records[]="+e})),n=f+"/"+this.base+"/"+e+"?"+encodeURI(r),[4,a.default(n,{method:"delete",headers:{Authorization:"Bearer "+this.apiKey}})];case 1:return[4,(i=s.sent()).json()];case 2:if(o=s.sent(),!u.default(i.status))return[3,4];if(429!==i.status)throw new Error(JSON.stringify(o));return this.retryOnRateLimit?[4,l.default(n,{method:"delete",headers:{Authorization:"Bearer "+this.apiKey}},this.retryTimeout,this.maxRetry,"records")]:[3,4];case 3:return[2,s.sent()];case 4:return[2,o.records];case 5:throw d=s.sent(),new Error(d);case 6:return[2]}}))}))},this.upsertRecord=function(e,t,r,n){return i(h,void 0,void 0,(function(){var i;return s(this,(function(s){switch(s.label){case 0:return c.default(e,"table","string"),c.default(t,"filterString","string"),c.default(r,"record","object"),n&&(c.default(n.destructive,"opts.desctructive","boolean",!1),c.default(n.typecast,"opts.typecast","boolean",!1)),[4,this.select(e,{filterByFormula:t})];case 1:return(i=s.sent())[0]?[3,3]:[4,this.createRecord(e,r,null==n?void 0:n.typecast)];case 2:return[2,s.sent()];case 3:return[4,this.updateRecord(e,{id:i[0].id,fields:r},n)];case 4:return[2,s.sent()]}}))}))},!e)throw new Error("API Key is required.");if(!t)throw new Error("Base ID is required.");this.apiKey=e,this.base=t,this.retryOnRateLimit=(null==r?void 0:r.retryOnRateLimit)||!0,this.retryTimeout=(null==r?void 0:r.retryTimeout)||5e3,this.maxRetry=(null==r?void 0:r.maxRetry)||6e4};"undefined"!=typeof window&&(window.AsyncAirtable=h),e.exports=h},368:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(244);t.default=function(e){if(Object.prototype.hasOwnProperty.call(e,"filterByFormula")&&Object.prototype.hasOwnProperty.call(e,"where"))throw new Error("Cannot use both where and filterByFormula as they accomplish the same thing");var t=Object.keys(e).map((function(t,r){var i,s=e[t];return i=Array.isArray(s)?s.map((function(e,r){switch(typeof e){case"object":return Object.keys(e).map((function(n){return t+"["+r+"]["+n+"]="+e[n]})).join("&");case"string":return t+"[]="+e}})).join("&"):"where"===t?"filterByFormula="+n.default(s):t+"="+s,0!==r?"&"+i:i})).join("");return encodeURI(t)}},917:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n){if(void 0===n&&(n=!0),void 0===e&&n)throw new Error('Argument "'+t+'" is required.');if((void 0!==e||n)&&typeof e!==r){if("array"===r&&Array.isArray(e))return;throw new Error('Incorrect data type on argument "'+t+'". Received "'+typeof e+'": expected "'+r+'"')}}},320:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e>=300}},276:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(300);t.default="undefined"!=typeof window?window.fetch.bind(window):n},244:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.baseHandler=t.booleanHandler=t.logicalOperators=t.numericalOperators=t.buildExpression=t.isQueryObject=void 0;var r=["=","!=",">",">=","<","<="];t.isQueryObject=function(e){if(void 0===e)throw new Error("Missing Query Object");return null!==e&&!["string","number","boolean"].includes(typeof e)},t.buildExpression=function(e,n){if("object"!=typeof e||Array.isArray(e))throw new Error("Missing or Invalid Comparison Object");if("string"!=typeof n&&!r.includes(n))throw new Error("Missing or Invalid Comparison Operator");var i=Object.keys(e),s=""+i.map((function(r,s){var a=t.baseHandler(e[r]);return"{"+r+"} "+n+" "+a+(s<i.length-1?", ":"")})).join("");return i.length>1?"AND("+s+")":s},t.numericalOperators={$gt:function(e){return t.buildExpression(e,">")},$lt:function(e){return t.buildExpression(e,"<")},$gte:function(e){return t.buildExpression(e,">=")},$lte:function(e){return t.buildExpression(e,"<=")},$eq:function(e){return t.buildExpression(e,"=")},$neq:function(e){return t.buildExpression(e,"!=")}},t.logicalOperators={$not:function(e){return"NOT("+n(e)+")"},$and:function(e){var t="AND(";return e.forEach((function(r,i){t+=n(r),i<e.length-1&&(t+=", ")})),t+")"},$or:function(e){var t="OR(";return e.forEach((function(r,i){t+=n(r),i<e.length-1&&(t+=", ")})),t+")"}},t.booleanHandler=function(e){if("boolean"!=typeof e)throw new Error("Invalid type");return e?"TRUE()":"FALSE()"},t.baseHandler=function(e){if(null===e)return"BLANK()";switch(typeof e){case"number":return""+e;case"string":return"'"+e+"'";case"boolean":return t.booleanHandler(e);default:throw new Error("Wrong Type")}};var n=function(e){var r="";if(Object.keys(e).length>1)r+=t.logicalOperators.$and(Object.keys(e).map((function(t){var r;return(r={})[t]=e[t],r})));else for(var n in e){var i=e[n];n in t.numericalOperators&&t.isQueryObject(i)?r+=t.numericalOperators[n](i):n in t.logicalOperators&&(t.isQueryObject(i)||Array.isArray(i))?r+=t.logicalOperators[n](i):r+=t.buildExpression(e,"=")}return r};t.default=n},682:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function a(e){try{u(n.next(e))}catch(e){s(e)}}function o(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,i,s,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=t.call(e,a)}catch(e){s=[6,e],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(276);t.default=function(e,t,r,a,o){return n(void 0,void 0,void 0,(function(){return i(this,(function(u){return[2,new Promise((function(u,c){var l=function(e,t,r,a,o){a&&a<1&&c("Max timeout exceeded"),setTimeout((function(){return n(void 0,void 0,void 0,(function(){var n,f,d;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,3,,4]),[4,s.default(e,t)];case 1:return[4,(n=i.sent()).json()];case 2:return f=i.sent(),429===n.status?[2,l(e,t,1.5*r,a-r,o)]:(u(o?f[o]:f),[3,4]);case 3:return d=i.sent(),c(d),[3,4];case 4:return[2]}}))}))}),r)};l(e,t,r,a,o)}))]}))}))}}},t={};!function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(759)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,