import { SelectOptions, AirtableRecord, AirtableUpdateRecord, DeleteResponse, Fields, Config, updateOpts } from './@types';
/** @ignore */
declare global {
    interface Window {
        AsyncAirtable: typeof AsyncAirtable;
    }
}
/**
 * The main AsyncAirtable class.
 */
declare class AsyncAirtable {
    /**
     * @default=true
     * This decides whether or not the library will
     * handle retrying a request when rate limited
     */
    retryOnRateLimit: boolean;
    /**
     * @default=60000
     * The maxmium amount of time before the
     * library will stop retrying and timeout when rate limited
     */
    maxRetry: number;
    /**
     * @default=5000
     * The starting timeout for the retry. This will get 50%
     * larger with each try until you hit the maxRetry amount
     */
    retryTimeout: number;
    /** The API Key from AirTable */
    apiKey: string;
    /** The base id from AirTable */
    base: string;
    /**
     * Creates a new instance of the AsyncAirtable library.
     * @param apiKey The API Key from AirTable
     * @param base The base id from AirTable
     * @param config The config to use for this instance of AsyncAirtable
     */
    constructor(apiKey: string, base: string, config?: Config);
    /**
     * Select record(s) from the specified table.
     * @param table Table name
     * @param options Options object, used to filter records
     * @param page Used to get a specific page of records
     * @returns
     * @async
     */
    select: (table: string, options?: SelectOptions | undefined, page?: number | undefined) => Promise<AirtableRecord[]>;
    /**
     * Finds a record on the specified table.
     * @param table Table name
     * @param id Airtable record ID
     * @returns
     * @async
     */
    find: (table: string, id: string) => Promise<AirtableRecord>;
    /**
     * Creates a new record on the specified table.
     * @param table - Table name
     * @param record - Record object, used to structure data for insert
     * @param typecast - Used for allowing the ability to add new selections for Select and Multiselect fields.
     * @returns
     * @async
     */
    createRecord: (table: string, record: Fields, typecast?: boolean | undefined) => Promise<AirtableRecord>;
    /**
     * Updates a record on the specified table.
     * @param table - Table name
     * @param record - Record object, used to update data within a specific record
     * @param opts - An object with options for your update statement
     * @returns
     * @async
     */
    updateRecord: (table: string, record: AirtableUpdateRecord, opts?: updateOpts | undefined) => Promise<AirtableRecord>;
    /**
     * Deletes a record from the specified table.
     * @param table - Table name
     * @param id - Airtable record ID
     * @returns
     * @async
     */
    deleteRecord: (table: string, id: string) => Promise<DeleteResponse>;
    /**
     * Creates multiple new records on the specified table.
     * @param table - Table name
     * @param records - An array of Record objects
     * @param typecast - Used for allowing the ability to add new selections for Select and Multiselect fields.
     * @returns
     * @async
     */
    bulkCreate: (table: string, records: Fields[], typecast?: boolean | undefined) => Promise<AirtableRecord[]>;
    /**
     * Updates multiple records on the specified table
     * @param table - Table name
     * @param records - An array of Record objects
     * @param opts - An object with options for your update statement
     * @returns
     * @async
     */
    bulkUpdate: (table: string, records: AirtableUpdateRecord[], opts?: updateOpts | undefined) => Promise<AirtableRecord[]>;
    /**
     * Deletes multiple records from the specified table
     * @param table - Table name
     * @param ids - Array of Airtable record IDs
     * @returns
     * @async
     */
    bulkDelete: (table: string, ids: string[]) => Promise<DeleteResponse[]>;
    /**
     * Checks if a record exists, and if it does updates it, if not creates a new record.
     * @param table - Table name
     * @param filterString - The filter formula string used to check for a record
     * @param record - Record object used to either update or create a record
     * @param opts - An object with options for your update statement
     * @returns
     * @async
     */
    upsertRecord: (table: string, filterString: string, record: Fields, opts?: updateOpts | undefined) => Promise<AirtableRecord>;
}
export = AsyncAirtable;
