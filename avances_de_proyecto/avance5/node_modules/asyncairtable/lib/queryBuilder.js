"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.baseHandler = exports.booleanHandler = exports.logicalOperators = exports.numericalOperators = exports.buildExpression = exports.isQueryObject = void 0;
var operators = ['=', '!=', '>', '>=', '<', '<='];
var isQueryObject = function (item) {
    if (item === undefined)
        throw new Error('Missing Query Object');
    var types = ['string', 'number', 'boolean'];
    return item !== null && !types.includes(typeof item);
};
exports.isQueryObject = isQueryObject;
var buildExpression = function (obj, op) {
    if (typeof obj !== 'object' || Array.isArray(obj))
        throw new Error('Missing or Invalid Comparison Object');
    if (typeof op !== 'string' && !operators.includes(op))
        throw new Error('Missing or Invalid Comparison Operator');
    var keys = Object.keys(obj);
    var expressionMapper = function (k, i) {
        var val = exports.baseHandler(obj[k]);
        return "{" + k + "} " + op + " " + val + (i < keys.length - 1 ? ', ' : '');
    };
    var exp = "" + keys.map(expressionMapper).join('');
    return keys.length > 1 ? "AND(" + exp + ")" : exp;
};
exports.buildExpression = buildExpression;
exports.numericalOperators = {
    $gt: function (val) {
        return exports.buildExpression(val, '>');
    },
    $lt: function (val) {
        return exports.buildExpression(val, '<');
    },
    $gte: function (val) {
        return exports.buildExpression(val, '>=');
    },
    $lte: function (val) {
        return exports.buildExpression(val, '<=');
    },
    $eq: function (val) {
        return exports.buildExpression(val, '=');
    },
    $neq: function (val) {
        return exports.buildExpression(val, '!=');
    },
};
exports.logicalOperators = {
    $not: function (expression) { return "NOT(" + queryBuilder(expression) + ")"; },
    $and: function (args) {
        var str = 'AND(';
        args.forEach(function (arg, i) {
            str += queryBuilder(arg);
            if (i < args.length - 1) {
                str += ', ';
            }
        });
        return str + ')';
    },
    $or: function (args) {
        var str = 'OR(';
        args.forEach(function (arg, i) {
            str += queryBuilder(arg);
            if (i < args.length - 1) {
                str += ', ';
            }
        });
        return str + ')';
    },
};
var booleanHandler = function (bool) {
    if (typeof bool !== 'boolean') {
        throw new Error('Invalid type');
    }
    return bool ? 'TRUE()' : 'FALSE()';
};
exports.booleanHandler = booleanHandler;
var baseHandler = function (val) {
    if (val === null) {
        return 'BLANK()';
    }
    switch (typeof val) {
        case 'number':
            return "" + val;
        case 'string':
            return "'" + val + "'";
        case 'boolean':
            return exports.booleanHandler(val);
        default:
            throw new Error('Wrong Type');
    }
};
exports.baseHandler = baseHandler;
var queryBuilder = function (query) {
    var formulaString = '';
    if (Object.keys(query).length > 1) {
        formulaString += exports.logicalOperators.$and(Object.keys(query).map(function (k) {
            var _a;
            return (_a = {}, _a[k] = query[k], _a);
        }));
    }
    else {
        for (var key in query) {
            var current = query[key];
            if (key in exports.numericalOperators && exports.isQueryObject(current)) {
                formulaString += exports.numericalOperators[key](current);
            }
            else if (key in exports.logicalOperators &&
                (exports.isQueryObject(current) || Array.isArray(current))) {
                formulaString += exports.logicalOperators[key](current);
            }
            else {
                formulaString += exports.buildExpression(query, '=');
            }
        }
    }
    return formulaString;
};
exports.default = queryBuilder;
//# sourceMappingURL=queryBuilder.js.map